{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\Desktop\\\\emplyee management 3\\\\myapp\\\\src\\\\Context\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\nimport AuthContext from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if token exists in cookies and set authentication state\n    const jwtToken = Cookies.get('jwt_token');\n    setIsAuthenticated(!!jwtToken);\n  }, [isAuthenticated]); // Empty dependency array ensures this effect runs only once\n\n  // Function to log in\n  const login = token => {\n    Cookies.set('jwt_token', token);\n    setIsAuthenticated(true);\n  };\n\n  // Function to log out\n  const logout = () => {\n    Cookies.remove('jwt_token');\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["AuthContext","jsxDEV","_jsxDEV","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","useState","useEffect","jwtToken","Cookies","get","login","token","set","logout","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aksha/Desktop/emplyee management 3/myapp/src/Context/AuthProvider.js"],"sourcesContent":["\r\nimport AuthContext from \"./AuthContext\";\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Check if token exists in cookies and set authentication state\r\n        const jwtToken = Cookies.get('jwt_token');\r\n        setIsAuthenticated(!!jwtToken);\r\n    }, [isAuthenticated]); // Empty dependency array ensures this effect runs only once\r\n\r\n    // Function to log in\r\n    const login = (token) => {\r\n        Cookies.set('jwt_token', token);\r\n        setIsAuthenticated(true);\r\n    };\r\n\r\n    // Function to log out\r\n    const logout = () => {\r\n        Cookies.remove('jwt_token');\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ login, logout, isAuthenticated }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AACA,OAAOA,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACzCL,kBAAkB,CAAC,CAAC,CAACG,QAAQ,CAAC;EAClC,CAAC,EAAE,CAACJ,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEvB;EACA,MAAMO,KAAK,GAAIC,KAAK,IAAK;IACrBH,OAAO,CAACI,GAAG,CAAC,WAAW,EAAED,KAAK,CAAC;IAC/BP,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACjBL,OAAO,CAACM,MAAM,CAAC,WAAW,CAAC;IAC3BV,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACIL,OAAA,CAACF,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEN,KAAK;MAAEG,MAAM;MAAEV;IAAgB,CAAE;IAAAF,QAAA,EAC3DA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAClB,EAAA,CA1BWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}