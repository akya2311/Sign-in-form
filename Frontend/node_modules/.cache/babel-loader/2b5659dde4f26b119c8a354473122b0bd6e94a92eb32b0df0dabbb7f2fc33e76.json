{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\Desktop\\\\Sign-Up Form\\\\myapp\\\\src\\\\ProtectedRoute\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom'; // Adjust the path as needed\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element: Component,\n  ...rest\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Manage authentication state\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const jwtToken = Cookies.get('jwt_token');\n      if (!jwtToken) {\n        setIsAuthenticated(false);\n        return;\n      }\n      const url = `${process.env.REACT_APP_API_URL}/api/auth/user`;\n      const options = {\n        headers: {\n          Authorization: `Bearer ${jwtToken}`\n        },\n        method: 'GET'\n      };\n      try {\n        const response = await fetch(url, options);\n        if (response.ok) {\n          setIsAuthenticated(true);\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        setIsAuthenticated(false);\n      }\n    };\n    fetchUser();\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  if (isAuthenticated === null) {\n    // You might want to show a loading spinner here while checking authentication\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 28\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 54\n  }, this);\n};\n_s(ProtectedRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","Cookies","jsxDEV","_jsxDEV","ProtectedRoute","element","Component","rest","_s","isAuthenticated","setIsAuthenticated","fetchUser","jwtToken","get","url","process","env","REACT_APP_API_URL","options","headers","Authorization","method","response","fetch","ok","error","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/aksha/Desktop/Sign-Up Form/myapp/src/ProtectedRoute/ProtectedRoute.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom'; // Adjust the path as needed\r\nimport Cookies from 'js-cookie';\r\n\r\nconst ProtectedRoute = ({ element: Component, ...rest }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Manage authentication state\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const jwtToken = Cookies.get('jwt_token');\r\n      if (!jwtToken) {\r\n        setIsAuthenticated(false);\r\n        return;\r\n      }\r\n      const url = `${process.env.REACT_APP_API_URL}/api/auth/user`;\r\n      const options = {\r\n        headers: {\r\n          Authorization: `Bearer ${jwtToken}`,\r\n        },\r\n        method: 'GET',\r\n      };\r\n      try {\r\n        const response = await fetch(url, options);\r\n        if (response.ok) {\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          setIsAuthenticated(false);\r\n        }\r\n      } catch (error) {\r\n        setIsAuthenticated(false);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []); // Empty dependency array ensures this runs once on mount\r\n\r\n  if (isAuthenticated === null) {\r\n    // You might want to show a loading spinner here while checking authentication\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return isAuthenticated ? <Component {...rest} /> : <Navigate to=\"/\" />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB,CAAC,CAAC;AAC7C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9DD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAGX,OAAO,CAACY,GAAG,CAAC,WAAW,CAAC;MACzC,IAAI,CAACD,QAAQ,EAAE;QACbF,kBAAkB,CAAC,KAAK,CAAC;QACzB;MACF;MACA,MAAMI,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,gBAAe;MAC5D,MAAMC,OAAO,GAAG;QACdC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASR,QAAS;QACpC,CAAC;QACDS,MAAM,EAAE;MACV,CAAC;MACD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAEI,OAAO,CAAC;QAC1C,IAAII,QAAQ,CAACE,EAAE,EAAE;UACfd,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLA,kBAAkB,CAAC,KAAK,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdf,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIF,eAAe,KAAK,IAAI,EAAE;IAC5B;IACA,oBAAON,OAAA;MAAAuB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,OAAOrB,eAAe,gBAAGN,OAAA,CAACG,SAAS;IAAA,GAAKC;EAAI;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,gBAAG3B,OAAA,CAACH,QAAQ;IAAC+B,EAAE,EAAC;EAAG;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxE,CAAC;AAACtB,EAAA,CAtCIJ,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAwCpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}