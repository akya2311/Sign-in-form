{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\Desktop\\\\emplyee management 3\\\\myapp\\\\src\\\\Context\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from \"react\";\nimport AuthContext from \"./AuthContext\";\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  useEffect(() => {\n    // Check if token exists in cookies and set authentication state\n    const jwtToken = Cookies.get('jwt_token');\n    if (jwtToken !== undefined) {\n      setIsAuthenticated(true);\n    } else {\n      setIsAuthenticated(false);\n    }\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const jwtToken = Cookies.get('jwt_token');\n      const url = `${process.env.REACT_APP_API_URL}/api/auth/user`;\n      const options = {\n        headers: {\n          Authorization: `Bearer ${jwtToken}`\n        },\n        method: 'GET'\n      };\n      const response = await fetch(url, options);\n      if (response.ok) {\n        setUserAdmin(true);\n      }\n    };\n    fetchUser();\n  }, []);\n  // Function to log in\n  const login = token => {\n    Cookies.set('jwt_token', token, {\n      expires: 5\n    });\n    setIsAuthenticated(true);\n  };\n\n  // Function to log out\n  const logout = () => {\n    Cookies.remove('jwt_token');\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"zfEEzwl5HoVXIHCKv+Hxil0ul8c=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","Cookies","jsxDEV","_jsxDEV","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","jwtToken","get","undefined","fetchUser","url","process","env","REACT_APP_API_URL","options","headers","Authorization","method","response","fetch","ok","setUserAdmin","login","token","set","expires","logout","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aksha/Desktop/emplyee management 3/myapp/src/Context/AuthProvider.js"],"sourcesContent":["import {React,useState,useEffect} from \"react\";\r\nimport AuthContext from \"./AuthContext\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Check if token exists in cookies and set authentication state\r\n        const jwtToken = Cookies.get('jwt_token');\r\n        if (jwtToken !== undefined){\r\n            setIsAuthenticated(true);\r\n        }\r\n        else{\r\n            setIsAuthenticated(false)\r\n        }\r\n        \r\n    }, []); // Empty dependency array ensures this effect runs only once\r\n   \r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n          const jwtToken = Cookies.get('jwt_token');\r\n          const url = `${process.env.REACT_APP_API_URL}/api/auth/user`;\r\n          const options = {\r\n            headers: {\r\n              Authorization: `Bearer ${jwtToken}`,\r\n            },\r\n            method: 'GET',\r\n          };\r\n          const response = await fetch(url, options);\r\n          if (response.ok) {\r\n            setUserAdmin(true);\r\n          }\r\n        };\r\n    \r\n        fetchUser();\r\n      }, []);\r\n    // Function to log in\r\n    const login = (token) => {\r\n       \r\n        Cookies.set('jwt_token', token, { expires: 5 }); \r\n        setIsAuthenticated(true);\r\n       \r\n      };\r\n    \r\n\r\n    // Function to log out\r\n    const logout = () => {\r\n        Cookies.remove('jwt_token');\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ login, logout, isAuthenticated }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,SAAQA,KAAK,EAACC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC9C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,QAAQ,GAAGR,OAAO,CAACS,GAAG,CAAC,WAAW,CAAC;IACzC,IAAID,QAAQ,KAAKE,SAAS,EAAC;MACvBH,kBAAkB,CAAC,IAAI,CAAC;IAC5B,CAAC,MACG;MACAA,kBAAkB,CAAC,KAAK,CAAC;IAC7B;EAEJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERT,SAAS,CAAC,MAAM;IACZ,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMH,QAAQ,GAAGR,OAAO,CAACS,GAAG,CAAC,WAAW,CAAC;MACzC,MAAMG,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,gBAAe;MAC5D,MAAMC,OAAO,GAAG;QACdC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASV,QAAS;QACpC,CAAC;QACDW,MAAM,EAAE;MACV,CAAC;MACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAEI,OAAO,CAAC;MAC1C,IAAII,QAAQ,CAACE,EAAE,EAAE;QACfC,YAAY,CAAC,IAAI,CAAC;MACpB;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACR;EACA,MAAMa,KAAK,GAAIC,KAAK,IAAK;IAErBzB,OAAO,CAAC0B,GAAG,CAAC,WAAW,EAAED,KAAK,EAAE;MAAEE,OAAO,EAAE;IAAE,CAAC,CAAC;IAC/CpB,kBAAkB,CAAC,IAAI,CAAC;EAE1B,CAAC;;EAGH;EACA,MAAMqB,MAAM,GAAGA,CAAA,KAAM;IACjB5B,OAAO,CAAC6B,MAAM,CAAC,WAAW,CAAC;IAC3BtB,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACIL,OAAA,CAACH,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAEP,KAAK;MAAEI,MAAM;MAAEtB;IAAgB,CAAE;IAAAF,QAAA,EAC3DA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC9B,EAAA,CArDWF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}